# vim: ft=sls nolist

{{- if eq .Values.ingressType "nginx" }}

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: www-boost-{{.Values.deploymentEnvironment}}
  namespace: {{ .Values.namespace }}
  labels:
    env: {{ .Values.deploymentEnvironment }}
    app: boost
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-production
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/proxy-body-size:
      {{ .Values.clientMaxBodySize|quote }}
spec:
  tls:
    - hosts:
        - www.{{.Values.publicFqdn}}
        - {{ .Values.publicFqdn }}
      secretName: www.{{.Values.publicFqdn}}-tls
  rules:
    - host: www.{{.Values.publicFqdn}}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: boost
                port:
                  number: 80
    - host: {{ .Values.publicFqdn }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: boost
                port:
                  number: 80
    - host: www.{{.Values.publicFqdn2 }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: boost
                port:
                  number: 80
    - host: {{ .Values.publicFqdn2 }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: boost
                port:
                  number: 80

{{- else if eq .Values.ingressType "gce" }}

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: www-boost-{{.Values.deploymentEnvironment}}
  namespace: {{ .Values.namespace }}
  labels:
    env: {{ .Values.deploymentEnvironment }}
    app: boost
  annotations:
    # cert-manager.io/cluster-issuer: letsencrypt-staging
    kubernetes.io/ingress.class: "gce"
    networking.gke.io/managed-certificates: {{ .Values.managedCertName }}
    networking.gke.io/v1beta1.FrontendConfig: frontend-{{ .Values.deploymentEnvironment }}
    nginx.ingress.kubernetes.io/proxy-body-size:
      {{ .Values.clientMaxBodySize|quote }}
    kubernetes.io/ingress.global-static-ip-name: {{ .Values.ingressStaticIp }}
spec:
  # also managed cert. see above.
  tls:
    - secretName: {{ .Values.secretCertName }}
  rules:
    - host: www.{{.Values.publicFqdn}}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: boost
                port:
                  number: 80
    - host: {{ .Values.publicFqdn }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: boost
                port:
                  number: 80
    - host: www.{{.Values.publicFqdn2 }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: boost
                port:
                  number: 80
    - host: {{ .Values.publicFqdn2 }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: boost
                port:
                  number: 80
---
apiVersion: networking.gke.io/v1beta1
kind: FrontendConfig
metadata:
  name: frontend-{{ .Values.deploymentEnvironment }}
spec:
  redirectToHttps:
    enabled: true
{{ end }}
